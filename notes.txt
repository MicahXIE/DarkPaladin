1. C++: Encapsulation, Inheritance and Polymorphism

Inheritance: construction, access level, multiple inheritance

1) public继承方式
基类中所有 public 成员在派生类中为 public 属性；
基类中所有 protected 成员在派生类中为 protected 属性；
基类中所有 private 成员在派生类中不能使用。

2) protected继承方式
基类中的所有 public 成员在派生类中为 protected 属性；
基类中的所有 protected 成员在派生类中为 protected 属性；
基类中的所有 private 成员在派生类中不能使用。

3) private继承方式
基类中的所有 public 成员在派生类中均为 private 属性；
基类中的所有 protected 成员在派生类中均为 private 属性；
基类中的所有 private 成员在派生类中不能使用。

https://blog.csdn.net/feiyinzilgd/article/details/6226348

The protected access label can be thought of as a blend of private and public :

Like private members, protected members are inaccessible to users of the class.
Like public members, the protected members are accessible to classes derived from this class.
In addition, protected has another important property:
A derived object may access the protected members of its base class only through a derived
object. The derived class has no special access to the protected members of base type objects.

在没有继承的情况下，protected跟private相同。在派生类的时候才出现分化。

上面那段英文前两条都很好理解，基类对象不能访问基类的protected成员，派生类中可以访问基类的protected成员。
也就是说private成员是不能被继承的，只有public，protected的成员才可以被继承。

很多书上都说有派生类的情况下protected的访问权限同public。这种说法是不对的，类内部直接访问没什么区别，
但是访问对象基类的protected成员只能是在该类的内部。


Polymorphism: 
https://www.geeksforgeeks.org/virtual-functions-and-runtime-polymorphism-in-c-set-1-introduction/
https://blog.csdn.net/i_chaoren/article/details/77281785

Array -> Actual Object (vptr) -> VTable

vptr: A pointer to vtable. It is maintained per object
vtable: A table of function pointers. It is maintained per class



2. 3 different ways to create array of strings in C++

reference: https://www.geeksforgeeks.org/array-strings-c-3-different-ways-create/


1) char colour[4][10] = {"Blue", "Red", "Orange", "Yellow"};
2) string colour[4] = {"Blue", "Red", "Orange", "Yellow"};
3) vector<string> colour;
   colour.push_back("Blue");
   colour.push_back("Red");
   colour.push_back("Orange");
   colour.push_back("Yellow");

tips:
g++ Strings.cpp -o Strings
effective STL


3. String Summary

http://www.cplusplus.com/reference/string/string/


4. read input array

fixed number:
int main()
{
       int n = 0;
       cin >> n;
       vector<int> p(n);
       for(int i = 0; i < n; i++){
              cin >> p[i];
       }
       return 0;
}


variable number:
#include<sstream> //注意加这个头
int main()
{
       string str,temp;
       getline(cin, str);
       int i = 0;
       vector<int> p;
       stringstream input(str);
       while(input >> i){
              p.push_back(i);
       }      
       return 0;
}

vector print:
for (auto iter = p.begin(); iter != p.end(); iter++){
    cout << *iter << ' ';
}


5. STL: Vector

1) Declaration:
vector<int>v; (creates an empty vector of integers)

2) Size:
int size=v.size();

3) Pushing an integer into a vector:
v.push_back(x);(where x is an integer.The size increases by 1 after this.)

4) Popping the last element from the vector:
v.pop_back(); (After this the size decreases by 1)

5) Sorting a vector:
sort(v.begin(),v.end()); (Will sort all the elements in the vector)

6) erase(int position):
Removes the element present at position.  
Ex: v.erase(v.begin()+4); (erases the fifth element of the vector v)
erase(int start,int end):

Removes the elements in the range from start to end inclusive of the start and exclusive of the end.
Ex:v.erase(v.begin()+2,v.begin()+5);(erases all the elements from the third element to the fifth element.)

tips 
correct:
int p1,p2,p3;
int p1=0,p2=0,p3=0; 
int p1,p2=0,p3=0;

wrong:
int p1=p2=p3=0;


6. STL: Map

1）Map Template:
std::map <key_type, data_type>

2）Declaration:
map<string,int>m; //Creates a map m where key_type is of type string and data_type is of type int.

3）Size:
int length=m.size(); //Gives the size of the map.

4）Insert:
m.insert(make_pair("hello",9)); //Here the pair is inserted into the map where the key is "hello" and the value associated with it is 9.

5）Erasing an element:
m.erase(val); //Erases the pair from the map where the key_type is val.

6）Finding an element:
map<string,int>::iterator itr=m.find(val); //Gives the iterator to the element val if it is found otherwise returns m.end() .
Ex: map<string,int>::iterator itr=m.find("Maps"); //If Maps is not present as the key value then itr==m.end().

7）Accessing the value stored in the key:
To get the value stored of the key "MAPS" we can do m["MAPS"] or we can get the iterator using the find function and then by itr->second we can access the value.

8) map提供了两种方式，查看是否包含key，m.count(key)，m.find(key)。 reference: https://www.cnblogs.com/nzbbody/p/3409298.html



7. STL: Set
Sets are a part of the C++ STL. Sets are containers that store unique elements following a specific order. Here are some of the frequently used member functions of sets:

1) Declaration:
set<int>s; //Creates a set of integers.

2) Size:
int length=s.size(); //Gives the size of the set.

3) Insert:
s.insert(x); //Inserts an integer x into the set s.

4) Erasing an element:
s.erase(val); //Erases an integer val from the set s.

5) Finding an element:
set<int>::iterator itr=s.find(val); //Gives the iterator to the element val if it is found otherwise returns s.end() .
Ex: set<int>::iterator itr=s.find(100); //If 100 is not present then it==s.end().



8. STL: Deque

Double ended queue or Deque(part of C++ STL) are sequence containers with dynamic sizes that can be expanded or contracted on both ends (either its front or its back). The member functions of deque that are mainly used are:

1) Deque Template:
std::deque<value_type>

2) Declaration:
deque<int> mydeque; //Creates a double ended queue of deque of int type

3) Size
int length = mydeque.size(); //Gives the size of the deque

4) Push
mydeque.push_back(1); //Pushes element at the end
mydeque.push_front(2); //Pushes element at the beginning

5) Pop
mydeque.pop_back(); //Pops element from the end
mydeque.pop_front(); //Pops element from the beginning

6) Empty
mydeque.empty() //Returns a boolean value which tells whether the deque is empty or not


tips:
lower_bound & upper_bound

iterator lower_bound( const key_type &key ): 返回一个迭代器，指向键值>= key的第一个元素。

iterator upper_bound( const key_type &key ):返回一个迭代器，指向键值> key的第一个元素。

9. C++ formating output:

#include <iostream>
#include <iomanip>//不要忘记包含此头文件
using namespace std;
int main()
{
   int a;
   cout<<"input a:";
   cin>>a;
   cout<<"dec:"<<dec<<a<<endl;  //以十进制形式输出整数
   cout<<"hex:"<<hex<<a<<endl;  //以十六进制形式输出整数a
   cout<<"oct:"<<setbase(8)<<a<<endl;  //以八进制形式输出整数a
   char *pt="China";  //pt指向字符串"China"
   cout<<setw(10)<<pt<<endl;  //指定域宽为,输出字符串
   cout<<setfill('*')<<setw(10)<<pt<<endl;  //指定域宽,输出字符串,空白处以'*'填充
   double pi=22.0/7.0;  //计算pi值
   //按指数形式输出,8位小数
   cout<<setiosflags(ios::scientific)<<setprecision(8);
   cout<<"pi="<<pi<<endl;  //输出pi值
   cout<<"pi="<<setprecision(4)<<pi<<endl;  //改为位小数
   cout<<"pi="<<setiosflags(ios::fixed)<<pi<<endl;  //改为小数形式输出
   return 0;
}

https://www.cnblogs.com/yongdaimi/p/7126409.
refer to print pretty file.


10. C++ split()

#include <string>
#include <sstream>
#include <vector>
#include <iterator>

template<typename Out>
void split(const std::string &s, char delim, Out result) {
    std::stringstream ss(s);
    std::string item;
    while (std::getline(ss, item, delim)) {
        *(result++) = item;
    }
}

std::vector<std::string> split(const std::string &s, char delim) {
    std::vector<std::string> elems;
    split(s, delim, std::back_inserter(elems));
    return elems;
}


11. struct vs class

1. The data members of a class are private by default and the members of 
a structure are public by default. 


2. Along with storing multiple data in a common block, it also assigns 
some functions (known as methods) to manipulate/access them. 
It serves as the building block of Object Oriented Programming.


C++中的struct对C中的struct进行了扩充，它已经不再只是一个包含不同数据类型的数据结构了，
它已经获取了太多的功能。

struct能包含成员函数吗？ 能！
struct能继承吗？ 能！！
struct能实现多态吗？ 能！！！ 

既然这些它都能实现，那它和class还能有什么区别？

最本质的一个区别就是默认的访问控制： 

默认的继承访问权限

struct是public的，class是private的。


当然，到底默认是public继承还是private继承，取决于子类而不是基类。

我的意思是，struct可以继承class，同样class也可以继承struct，那么默认的继承访问权限是看子类到底是用的struct还是class。如下：

struct A{}；class B : A{}; //private继承
struct C : B{}； //public继承

reference: https://www.cnblogs.com/starfire86/p/5367740.html


12. stringstream

split:
#include<sstream>
#include<iostream>
using namespace std;
int main()
{
        string line,word;
        while(getline(cin,line))
        {
                stringstream stream(line);
                cout<<stream.str()<<endl;
                while(stream>>word){cout<<word<<endl;}
        }
        return 0;
}
输入：shanghai no1 school 1989
输出：shanghi no1 school 1989
　　  shanghai
　　　no1
　　  school
　　　1989


formating:
#include<sstream>
#include<iostream>
using namespace std;
int main()
{
        int val1 = 512,val2 =1024;
        stringstream ss;
        ss<<"val1: "<<val1<<endl          //“val1: "此处有空格，字符串流是通过空格判断一个字符串的结束
　　　　 <<"val2: "<<val2<<endl;
        cout<<ss.str();

        string dump;
        int a,b;
        ss>>dump>>a
　　　　 >>dump>>b;
        cout<<a<<" "<<b<<endl;
        return 0;
}

输出为：val1: 512
　　　　val2: 1024
　　　　512 1024


excellent reference: http://www.cnblogs.com/firstmiki/p/6128639.html


13. c++ 类成员变量

类的成员变量的初始化都是在构造函数中实现的，而不能在类中设定默认值。其中，有三类成员变量比较特殊，
就是静态类型成员变量，const常量类型成员变量，　引用类型成员变量。

reference: http://www.cnblogs.com/devilmaycry812839668/p/6357403.html?utm_source=itdadao&utm_medium=referral

14. c++ string

str.length()

reference: https://www.cnblogs.com/aminxu/p/4686320.html

15. STL: Hashmap

C++ map 和 hash_map 对比
map的基本数据结构是平衡二叉树，hash_map的基础数据结构是hash_table哈希表，下面程序展示了向map和hash_map中插入数据消耗时间对比。
数据量较小的时候可以选择map，数据量大、对插入查找效率要求高的时候选择hash_map。

---------------------

reference: https://blog.csdn.net/chen199199/article/details/78865909?utm_source=copy 


tips:
Check out the resources on the page's right side to learn more about hashing. 
The video tutorial is by Gayle Laakmann McDowell, author of the best-selling interview book 
Cracking the Coding Interview.



Miscellaneous:

1) C++ STL sort()

arr[] = {1, 5, 8, 9, 6, 7, 3, 4, 2, 0};
sort(arr, arr+n);
//0 1 2 3 4 5 6 7 8 9 

sort(arr, arr+n, greater<int>());
//9 8 7 6 5 4 3 2 1 0

vector<int> arr;
sort(arr.begin(), arr.end());

reference: https://www.geeksforgeeks.org/sort-c-stl/


2）Algorithm book
https://web.stanford.edu/class/cs97si/
https://www.cnblogs.com/xsyfl/p/6938642.html





