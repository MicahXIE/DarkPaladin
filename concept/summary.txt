1. std::arrary

std::array<int, 10> arr = {1,2,3,4,5,6,7,8,9,0};
std::for_each(arr.begin(), arr.end(), [](int &i){i++;});
for(auto i : arr){std::cout << i << " ";}

vector std::array normal array
https://blog.csdn.net/qq_40983301/article/details/81061404

vector属于变长容器，即可以根据数据的插入删除重新构建容器容量；但array和数组属于定长容量。


2. const overload

https://blog.csdn.net/u012736748/article/details/77342431

3. operator overload

bool operator <(const Foo& other) const {
	if (a1<other.a1 || (a1==other.a1 && a2<other.a2))
        return true;

    return false;
}

4. C++ inheritance access

公有继承的特点是基类的公有成员和保护成员作为派生类的成员时，它们都保持原有的状态，而基类的私有成员仍然是私有的，不能被这个派生类的子类所访问。
保护继承的特点是基类的所有公有成员和保护成员都成为派生类的保护成员，并且只能被它的派生类成员函数或友元访问，基类的私有成员仍然是私有的。
私有继承的特点是基类的公有成员和保护成员都作为派生类的私有成员，并且不能被这个派生类的子类所访问。

https://www.cnblogs.com/qlwy/archive/2011/08/25/2153584.html

public, protected, private

5. callable objects in a thread

A callable object is something that can be called like a function, with the syntax object() or object(args); that is, a function pointer, or an object of a class type that overloads operator()


c++11 std::thread

e.g 1

#include <iostream>
#include <utility>
#include <thread>
#include <chrono>
#include <functional>
#include <atomic>

void f1(int n)
{
    for (int i = 0; i < 5; ++i) {
        std::cout << "Thread " << n << " executing\n";
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
    }
}

void f2(int& n)
{
    for (int i = 0; i < 5; ++i) {
        std::cout << "Thread 2 executing\n";
        ++n;
        std::this_thread::sleep_for(std::chrono::milliseconds(10));
    }
}

int main()
{
    int n = 0;
    std::thread t1; // t1 is not a thread
    std::thread t2(f1, n + 1); // pass by value
    std::thread t3(f2, std::ref(n)); // pass by reference
    std::thread t4(std::move(t3)); // t4 is now running f2(). t3 is no longer a thread
    t2.join();
    t4.join();
    std::cout << "Final value of n is " << n << '\n';
}


e.g 2

#include <chrono>    // std::chrono::seconds
#include <iostream>  // std::cout
#include <thread>    // std::thread, std::this_thread::sleep_for

void thread_task(int n) {
    std::this_thread::sleep_for(std::chrono::seconds(n));
    std::cout << "hello thread "
        << std::this_thread::get_id()
        << " paused " << n << " seconds" << std::endl;
}

int main(int argc, const char *argv[])
{
    std::thread threads[5];
    std::cout << "Spawning 5 threads...\n";
    for (int i = 0; i < 5; i++) {
        threads[i] = std::thread(thread_task, i + 1);
    }
    std::cout << "Done spawning threads! Now wait for them to join\n";
    for (auto& t: threads) {
        t.join();
    }
    std::cout << "All threads joined.\n";

    return EXIT_SUCCESS;
}

joinable: 检查线程是否可被 join。检查当前的线程对象是否表示了一个活动的执行线程，由默认构造函数创建的线程是不能被 join 的。另外，如果某个线程 已经执行完任务，但是没有被 join 的话，该线程依然会被认为是一个活动的执行线程，因此也是可以被 join 的。


detach: Detach 线程。 将当前线程对象所代表的执行实例与该线程对象分离，使得线程的执行可以单独进行。一旦线程执行完毕，它所分配的资源将会被释放。

调用 detach 函数之后：

*this 不再代表任何的线程执行实例。
joinable() == false
get_id() == std::thread::id()
另外，如果出错或者 joinable() == false，则会抛出 std::system_error。

swap: Swap 线程，交换两个线程对象所代表的底层句柄(underlying handles)。



http://www.runoob.com/w3cnote/cpp-std-thread.html


6. static data and function member

在类中，静态成员可以实现多个对象之间的数据共享，并且使用静态数据成员还不会破坏隐藏的原则，即保证了安全性。因此，静态成员是类的所有对象中共享的成员，而不是某个对象的成员。

　　使用静态数据成员可以节省内存，因为它是所有对象所公有的，因此，对多个对象来说，静态数据成员只存储一处，供所有对象共用。静态数据成员的值对每个对象都是一样，但它的值是可以更新的。只要对静态数据成员的值更新一次，保证所有对象存取更新后的相同的值，这样可以提高时间效率。


　　静态数据成员的使用方法和注意事项如下：

　　1、静态数据成员在定义或说明时前面加关键字static。//静态变量的定义

　　2、静态成员初始化与一般数据成员初始化不同。静态数据成员初始化的格式如下：

　　　　<数据类型><类名>::<静态数据成员名>=<值>  //静态变量的初始化

　　这表明：

         (1) 初始化在类体外进行，而前面不加static，（这点需要注意）以免与一般静态变量或对象相混淆。

　　(2) 初始化时不加该成员的访问权限控制符private，public等。

　　(3) 初始化时使用作用域运算符来标明它所属类，因此，静态数据成员是类的成员，而不是对象的成员。

　　3、静态数据成员是静态存储的，它是静态生存期，必须对它进行初始化。

　　4、引用静态数据成员时，采用如下格式：

　　　<类名>::<静态成员名>   //静态变量的使用方式

　　如果静态数据成员的访问权限允许的话(即public的成员)，可在程序中，按上述格式来引用静态数据成员。



https://www.cnblogs.com/ppgeneve/p/5091794.html



7. Template


(1)function template

#include <iostream>
#include <string>
 
using namespace std;
 
template <typename T>
inline T const& Max (T const& a, T const& b) 
{ 
    return a < b ? b:a; 
} 
int main ()
{
 
    int i = 39;
    int j = 20;
    cout << "Max(i, j): " << Max(i, j) << endl; 
 
    double f1 = 13.5; 
    double f2 = 20.7; 
    cout << "Max(f1, f2): " << Max(f1, f2) << endl; 
 
    string s1 = "Hello"; 
    string s2 = "World"; 
    cout << "Max(s1, s2): " << Max(s1, s2) << endl; 
 
   return 0;
}


(2)class template

#include <iostream>
#include <vector>
#include <cstdlib>
#include <string>
#include <stdexcept>
 
using namespace std;
 
template <class T>
class Stack { 
  private: 
    vector<T> elems;     // 元素 
 
  public: 
    void push(T const&);  // 入栈
    void pop();               // 出栈
    T top() const;            // 返回栈顶元素
    bool empty() const{       // 如果为空则返回真。
        return elems.empty(); 
    } 
}; 
 
template <class T>
void Stack<T>::push (T const& elem) 
{ 
    // 追加传入元素的副本
    elems.push_back(elem);    
} 
 
template <class T>
void Stack<T>::pop () 
{ 
    if (elems.empty()) { 
        throw out_of_range("Stack<>::pop(): empty stack"); 
    }
    // 删除最后一个元素
    elems.pop_back();         
} 
 
template <class T>
T Stack<T>::top () const 
{ 
    if (elems.empty()) { 
        throw out_of_range("Stack<>::top(): empty stack"); 
    }
    // 返回最后一个元素的副本 
    return elems.back();      
} 
 
int main() 
{ 
    try { 
        Stack<int>         intStack;  // int 类型的栈 
        Stack<string> stringStack;    // string 类型的栈 
 
        // 操作 int 类型的栈 
        intStack.push(7); 
        cout << intStack.top() <<endl; 
 
        // 操作 string 类型的栈 
        stringStack.push("hello"); 
        cout << stringStack.top() << std::endl; 
        stringStack.pop(); 
        stringStack.pop(); 
    } 
    catch (exception const& ex) { 
        cerr << "Exception: " << ex.what() <<endl; 
        return -1;
    } 
}
当上面的代码被编译和执行时，它会产生下列结果：

7
hello
Exception: Stack<>::pop(): empty stack



8. inline

在c/c++中，为了解决一些频繁调用的小函数大量消耗栈空间（栈内存）的问题，特别的引入了inline修饰符，表示为内联函数。

栈空间就是指放置程序的局部数据（也就是函数内数据）的内存空间。



https://www.cnblogs.com/fnlingnzb-learner/p/6423917.html


以下情况不宜使用内联： 
（1）如果函数体内的代码比较长，使用内联将导致内存消耗代价较高。 
（2）如果函数体内出现循环，那么执行函数体内代码的时间要比函数调用的开销大。


9. C++ exception

try总是与catch一同出现，伴随一个try语句，至少应该有一个catch()语句。try随后的block是可能抛出异常的地方。

catch带有一个参数，参数类型以及参数名字都由程序指定，名字可以忽略，如果在catch随后的block中并不打算引用这个异常对象的话。参数类型可以是build-intype，例如int,long, char等，也可以是一个对象，一个对象指针或者引用。如果希望捕获任意类型的异常，可以使用“...”作为catch的参数。

catch不一定要全部捕获tryblock中抛出的异常，剩下没有捕获的可以交给上一级函数处理。

throw后面带一个类型的实例，它和catch的关系就象是函数调用，catch指定形参，throw给出实参。编译器按照catch出现的顺序以及catch指定的参数类型确定一个异常应该由哪个catch来处理。

throw不一定非要出现在try随后的block中，它可以出现在任何需要的地方，只要最终有catch可以捕获它即可。即使在catch随后的block中，仍然可以继续throw。这时候有两种情况，一是throw一个新类型的异常，这与普通的throw一样。二是要rethrow当前这个异常，在这种情况下，throw不带参数即可表达。


void mightThrow(); // could throw any exceptions.
void doesNotThrow() noexcept; // does not throw any exceptions.

noexcept 指定符    要求函数不抛出任何异常 (C++11)
void may_throw();
void no_throw() noexcept;


noexcept 运算符进行编译时检查，若表达式声明为不抛出任何异常则返回 true。
 std::cout << std::boolalpha
           << "Is may_throw() noexcept? " << noexcept(may_throw()) << '\n'
           << "Is no_throw() noexcept? " << noexcept(no_throw()) << '\n'



10. virtual function

A virtual function a member function which is declared within base class and is re-defined (Overriden) by derived class. When you refer to a derived class object using a pointer or a reference to the base class, you can call a virtual function for that object and execute the derived class's version of the function.

https://www.cnblogs.com/weiyouqing/p/7544988.html


C++的虚函数主要作用是“运行时多态”，父类中提供虚函数的实现，为子类提供默认的函数实现。

　　子类可以重写父类的虚函数实现子类的特殊化。

class Animal
{  
    public:  
        virtual void eat()  
        {  
            cout<<"i eat like animals."<<endl;  
        }  
};  
class Dog:public Animal  
{  
    public:  
        void eat()  
        {  
            cout<<"i eat like a dog."<<endl;  
        }  
};  
int main(void)  
{  
    Animal *a = new Dog();  
    a->eat();   // 在这里，a虽然是指向Animal的指针，但是被调函数`eat()`却是`Dog`的! 。
    return 0;  
}

C++中包含纯虚函数的类，被称为是“抽象类”。抽象类不能使用new出对象，只有实现了这个纯虚函数的子类才能new出对象。
C++中的纯虚函数更像是“只提供申明，没有实现”，是对子类的约束，是“接口继承”。
C++中的纯虚函数也是一种“运行时多态”。


如果基类定义的纯虚函数，那么子类继承下来的也是纯虚函数，如果不给予实现，那么便不能创建子类的实例，
如果基类定义的是非纯虚函数，那么子类继承下来的也是非纯虚函数。都可以不予实现，因为自动继承下来了，看你子类的需要。

#include<iostream>
using namespace std;
class base
{
public :
    base(){x = 0;}
    base(int a){x = a;}
    virtual void display() = 0;
    int getx(){return x;}
private:
    int x;
};
class derived1 : public base
{
public:
    derived1(int a){ y = a;}
private:
    int y;
};
class derived2 : public base
{
public:
    derived2(int a, int b):base(a){ z = b;}
    void display()
    {
        cout<<getx()<<" "<<z<<endl;
    }
private:
    int z;
}
int main()
{
    base b;    //compile error
    derived1 d1(5);   //compile error
    derived2 d2(5,6);
    d2.display();
    return 0;
}


11. friend

友元(frend)机制允许一个类将对其非公有成员的访问权授予指定的函数或者类，友元的声明以friend开始，它只能出现在类定义的内部，友元声明可以出现在类中的任何地方：友元不是授予友元关系的那个类的成员，所以它们不受其声明出现部分的访问控制影响。通常，将友元声明成组地放在类定义的开始或结尾是个好主意。

友元类
(1) 友元关系不能被继承。
(2) 友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。
(3) 友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。


当用到友元成员函数时，需注意友元声明和友元定义之间的相互依赖，在该例子中，类B必须先定义，否则类A就不能将一个B的函数指定为友元。然而，只有在定义了类A之后，才能定义类B的该成员函数。更一般的讲，必须先定义包含成员函数的类，才能将成员函数设为友元。另一方面，不必预先声明类和非成员函数来将它们设为友元。


优点：

        可以灵活地实现需要访问若干类的私有或受保护的成员才能完成的任务；

        便于与其他不支持类概念的语言(如C语言、汇编等)进行混合编程；

        通过使用友元函数重载可以更自然地使用C++语言的IO流库。

缺点：

        一个类将对其非公有成员的访问权限授予其他函数或者类，会破坏该类的封装性，降低该类的可靠性和可维护性。


http://www.cnblogs.com/zhuguanhao/p/6286145.html


12. reference

1).&不是求地址运算符，而是起标志作用

2).引用的类型必须和其所绑定的变量的类型相同

3).声明引用的同时必须对其初始化，否则系统会报错

4).引用相当于变量或对象的别名，因此不能再将已有的引用名作为其他变量或对象的名字或别名

5).引用不是定义一个新的变量或对象，因此内存不会为引用开辟新的空间存储这个引用

6).对数组的引用
int a[3]={1,2,3};
int (&b)[3]=a;//对数组的引用

7).对指针的引用
int a=10;
int *ptr=&a;
int *&new_ptr=ptr;

https://www.cnblogs.com/duwenxing/p/7421100.html


13. static_cast vs dynamic_cast

c++除了能使用c语言的强制类型转换外，还新增了四种强制类型转换：static_cast、dynamic_cast、const_cast、reinterpret_cast，主要运用于继承关系类间的强制转化，语法为：

static_cast<new_type>      (expression)
dynamic_cast<new_type>     (expression) 
const_cast<new_type>       (expression) 
reinterpret_cast<new_type> (expression)

static_cast:
①用于类层次结构中基类（父类）和派生类（子类）之间指针或引用的转换。
进行上行转换（把派生类的指针或引用转换成基类表示）是安全的；
进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的。
②用于基本数据类型之间的转换，如把int转换成char，把int转换成enum。这种转换的安全性也要开发人员来保证。
③把空指针转换成目标类型的空指针。
④把任何类型的表达式转换成void类型。

dynamic_cast:
dynamic_cast主要用于类层次间的上行转换和下行转换，还可以用于类之间的交叉转换（cross cast）。
在类层次间进行上行转换时，dynamic_cast和static_cast的效果是一样的；
在进行下行转换时，dynamic_cast具有类型检查的功能，比static_cast更安全。dynamic_cast是唯一无法由旧式语法执行的动作，也是唯一可能耗费重大运行成本的转型动作

const_cast:
const_cast，用于修改类型的const或volatile属性。 

该运算符用来修改类型的const(唯一有此能力的C++-style转型操作符)或volatile属性。除了const 或volatile修饰之外， new_type和expression的类型是一样的。
①常量指针被转化成非常量的指针，并且仍然指向原来的对象；
②常量引用被转换成非常量的引用，并且仍然指向原来的对象；
③const_cast一般用于修改底指针。如const char *p形式。

当要求使用 volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被保存。

这说明这个 volatile 关键字发挥了它的作用。其实不只是“内嵌汇编操纵栈”这种方式属于编译无法识别的变量改变，另外更多的可能是多线程并发访问共享变量时，一个线程改变了变量的值，怎样让改变后的值对其它线程 visible。一般说来，volatile用在如下的几个地方： 
1) 中断服务程序中修改的供其它程序检测的变量需要加volatile； 
2) 多任务环境下各任务间共享的标志应该加volatile； 
3) 存储器映射的硬件寄存器通常也要加volatile说明，因为每次对它的读写都可能由不同意义；

// ref: https://www.geeksforgeeks.org/const_cast-in-c-type-casting-operators/

#include <iostream> 
using namespace std; 
  
int fun(int* ptr) 
{ 
    return (*ptr + 10); 
} 
  
int main(void) 
{ 
    const int val = 10; 
    const int *ptr = &val; 
    int *ptr1 = const_cast <int *>(ptr); 
    cout << fun(ptr1); 
    return 0; 
} 


reinterpret_cast:

new_type必须是一个指针、引用、算术类型、函数指针或者成员指针。它可以把一个指针转换成一个整数，也可以把一个整数转换成一个指针（先把一个指针转换成一个整数，再把该整数转换成原类型的指针，还可以得到原先的指针值）。

reinterpret_cast意图执行低级转型，实际动作（及结果）可能取决于编辑器，这也就表示它不可移植。

错误的使用reinterpret_cast很容易导致程序的不安全，只有将转换后的类型值转换回到其原始类型，这样才是正确使用reinterpret_cast方式。


https://www.cnblogs.com/chenyangchun/p/6795923.html


14. assert

https://www.jb51.net/article/117797.htm

assert宏的原型定义在<assert.h>中，其作用是如果它的条件返回错误，则终止程序执行

使用assert()的缺点是，频繁的调用会极大的影响程序的性能，增加额外的开销。在调试结束后，可以通过在包含#include <assert.h>的语句之前插入 #define NDEBUG 来禁用assert调用



15. const vs static

https://blog.csdn.net/qq_35524916/article/details/61469849


16. typedef

定义一种类型的别名，而不只是简单的宏替换。可以用作同时声明指针型的多个对象。

typedef char* PCHAR; // 一般用大写

ref: https://www.cnblogs.com/charley_yang/archive/2010/12/15/1907384.html


17. new and delete

void Test() {
    int* p1 = new int;
    int* p2 = new int(3);
    int* p3 = new int[3];

    delete p1;
    delete p2;
    delete[] p3;
}

总的来说，记住一点即可：new/delete、new[]/delete[] 配套使用总是没错的！


malloc/free只是动态分配内存空间/释放空间。而new/delete除了分配空间还会调用构造函数和析构函数进行初始化与清理（清理成员）。

　　*  它们都是动态管理内存的入口。
　　*  malloc/free是C/C++标准库的函数，new/delete是C++操作符。
　　*  malloc/free需要手动计算类型大小且返回值w为void*，new/delete可自动计算类型的大小，返回对应类型的指针。

　　*  malloc/free管理内存失败会返回0，new/delete等的方式管理内存失败会抛出异常。

https://www.cnblogs.com/tp-16b/p/8684298.html

18. const and constexpr

constexpr是一种比const 更严格的束缚, 它修饰的表达式本身在编译期间可知, 并且编译器会尽可能的 evaluate at compile time. 在constexpr 出现之前, 可以在编译期初始化的const都是implicit constexpr. 直到c++ 11, constexpr才从const中细分出来成为一个关键字, 而 const从1983年 c++ 刚改名的时候就存在了... 如果你初学c++, 应当尽可能的, 合理的使用constexpr来帮助编译器优化代码.

// constexpr 声明factorial可以参与编译期的运算
constexpr int factorial(int n)
{
    return n <= 1? 1 : (n * factorial(n - 1));
}
int main()
{
    std::cout << "4! = " ;
    constN<factorial(4)> out1; // computed at compile time
 
    volatile int k = 8; // disallow optimization using volatile
    std::cout << k << "! = " << factorial(k) << '\n'; // computed at run time
}


19. std:promise and std:future

并行开发挺复杂的，特别是在试图用好线程和锁的过程中。如果要用到条件变量或std-atomics（一种无锁开发方式），那就更复杂了。C++0x提供了future和promise来简化任务线程间的返回值操作；同时为启动任务线程提供了packaged_task以方便操作。其中的关键点是允许2个任务间使用无（显式）锁的方式进行值传递；标准库帮你高效的做好这些了。基本思路很简单：当一个任务需要向父线程（启动它的线程）返回值时，它把这个值放到promise中。之后，这个返回值会出现在和此promise关联的future中。于是父线程就能读到返回值。更简单点的方法，参看async()。

https://wizardforcel.gitbooks.io/cpp-11-faq/content/70.html


20. enum vs enum class

c++11中定义了强枚举类，即enum class，与之前的enum类型相比，它解决了以下三个问题： 
1. 枚举类型与整形之间的隐式转换： 
2. 底层类型无法由程序员指定: 
3. 弱作用域 


21 virtual inheritance

虚拟继承是多重继承中特有的概念。虚拟基类是为解决多重继承而出现的。如:类D继承自类B1、B2，而类B1、B2都继承自类A，因此在类D中两次出现类A中的变量和函数。为了节省内存空间，可以将B1、B2对A的继承定义为虚拟继承，而A就成了虚拟基类。实现的代码如下：

class A

class B1:public virtual A;

class B2:public virtual A;

class D:public B1,public B2;

虚拟继承在一般的应用中很少用到，所以也往往被忽视，这也主要是因为在C++中，多重继承是不推荐的，也并不常用，而一旦离开了多重继承，虚拟继承就完全失去了存在的必要因为这样只会降低效率和占用更多的空间。

https://liuhongjiang.github.io/hexotech/2012/11/30/virtual-inheritance/

哪些成员函数可以作为虚函数，可不可采用？哪些不可以作为虚函数？
1.构造函数（拷贝构造） 
不可以，因为有了构造函数才能构造出对象，对象中才能有虚表；而虚函数先调用虚表，在找到虚表中的构造函数；两者前后矛盾。

2.内联函数 
不可以，原因其实很简单，那内联函数就是为了在代码中直接展开，减少函数调用花费的代价，虚函数是为了在继承后对象能够准确的执行自己的动作，这是不可能统一的。（再说了，inline函数在编译时被展开，虚函数在运行时才能动态的邦定函数）

3.静态成员函数 
不可以，因为静态成员函数是全局的，对于所有的类来说，是一份公共的代码，它不归某个具体对象所有，所以他也没有要动态邦定的必要性。

4.友元函数 
不可以，因为C++不支持友元函数的继承，对于没有继承特性的函数没有虚函数的说法。

5.赋值运算符重载 
可以，但是不采用，虽然可以将operator=定义为虚函数，但最好不要这么做，使用时容易混淆。

6.析构函数 
可以，而且最好将基类的析构函数声明为虚函数。因为析构函数比较特殊，因为派生类的析构函数跟基类的析构函数名称不一样，但是构成覆盖，这里编译器做了特殊处理，减少了空间开销。

22. 虚函数，多态 和 虚表

C++中的虚函数（Virtual Function）是用来实现动态多态性的，指的是当基类指针指向其派生类实例时，可以用基类指针调用派生类中的成员函数。如果基类指针指向不同的派生类，则它调用同一个函数就可以实现不同的逻辑，这种机制可以让基类指针有“多种形态”，它的实现依赖于虚函数表。虚函数表（Virtual Table）是指在每个包含虚函数的类中都存在着一个函数地址的数组。本文将详细介绍虚函数表的实现及其内存布局。

https://jocent.me/2017/08/07/virtual-table.html

23. 贪心算法 vs 动态规划

比如某国的钱币分为   1元3元4元   
如果要拿6元钱   怎么拿？贪心的话   先拿4   再拿两个1     一共3张钱   
实际最优呢？   两张3元就够了   

https://blog.csdn.net/creat2012/article/details/40581081






