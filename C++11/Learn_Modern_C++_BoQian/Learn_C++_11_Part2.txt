9. override (for virtual function)

// To avoid inadvertently create new function in derived classes.

// C++ 03

class dog {
	virtual void A(int);
	virtual void B() const;
}

class yellowdog : public dog {
	virtual void A(float);	// created a new function 
	virtual void B();	// created a new function
}


// C++ 11

class dog {
	virtual void A(int);
	virtual void B() const;
	void C();
};

class yellowdog : public dog {
	virtual void A(float) override;	// Error: no function to override
	virtual void B() override;	// Error: no function to override
	void C() override;	// Error: no function to override
};



10. final (for virtual function and for class)

class dog final {	// no class can be derived from dog
	...
};

class dog {
	virtual void bark() final;	// no class can override bark()	
}


11. Compiler Generated Default Constructor

class dog {
	dog(int age) {}
};

dog dl;	// Error: compiler will not generate the default construtor


// C++ 11

class dog {
	dog(int age);
	dog() = default; // Force compiler to generate the default constructor	
}


12. delete

class dog {
	dog(int age) {}
}

dog a(2);
dog b(3.0);	// 3.0 is converted from double to int
a = b;	// Compiler generated assignment operator


// C++ 11
class dog {
	dog(int age) {}
	dog(double) = delete; // don't allow double value to convert
	dog& operator=(const dog&) = delete; // don't allow assignment operator
}

13. constexpr

int arr[6];		// OK
int A() { return 3; }
int arr[A()+3];		// Compile Error

// C++ 11
constexpr int A() { return 3; }		// Forces the computation to happen
									// at compile time

int arr[A()+3];						// Create an array of size 6


// Write faster program with constexpr
constexpr int cubed(int x) { return x * x * x; }

int y = cubed(1789);	// computed at compile time


14. New String Literals


// C++ 03:
char*	a = "string";

// C++ 11:
char*	a = u8"string";		// to define an UTF-8 string.
char16_t* b = u"string";	// to define an UTF-16 string.
char32_t* c = U"string";	// to define an UTF-32 string.
char*	d = R"string";		// to define a raw string.



15. lambda function

cout << [](int x, int y) {return x+y;}(3,4) << endl;		// Output: 7
auto f = [](int x, int y) { return x+y; };
cout << f(3,4) << endl;		// Output: 7

template<typename func>
void filter(func f, vector<int> arr) {
	for (auto i : arr) {
		if (f(i))
			cout << i << " ";
	}
}

int main() {
	vector<int> v = {1, 2, 3, 4, 5, 6 };

	filter([](int x){return (x>3);}, v);	// Output: 4, 5,  6
	filter([](int x){return (x>2 && x<5);}, v)		// Output: 3, 4

	int y = 4;
	filter([&](int x) {return (x>y);}, v);		// Output: 5, 6
	// Note: [&] tells compiler that we want variable capture
}


// https://boqian.weebly.com/












