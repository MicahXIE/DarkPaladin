1. Initializer List

//C++ 03 initializer list:
int arr[4] = {3, 2, 4, 5};

vector<int> v;
v.push_back(3);
v.push_back(2);
v.push_back(4);
v.push_back(5);


// C++ 11 extended the support
vector<int> v = {3, 4, 1, 9};  // Calling initializer_list constructor


/ All the relevant STL containers have been updated to accept initializer_list

// Define your own initializer_list constructor:
#include<initializer_list>

class boVector{
	vector<int> m_vec;
	public:
	boVector(const initializer_list<int>& v){
	    for(initilizer_list<int>::iterator itr = v.begin(); itr != v.end(); ++itr)
	    	m_vec.push_back(*itr);
	}
}

boVector v = {0, 2, 3, 4};
boVector v{0, 2, 3, 4};  //effectively the same


2. Uniform Initialization


// C++ 03 

class dog {  // Aggregate class or struct
	public:
		int age;
		string name;
};

// C++ 11 extended the scope of curly brace initialization

class dog{
	public:
		dog(int age, string name) {...};
};

dog dl = {5, "Henry"};


/* Uniform Initialization Search Order:
 * 1. Initializer_list constructor
 * 2. Regular constructor that takes the appropriate parameters
 * 3. Aggregate initializer
 */


dog dl(3);

class dog {
	public:
	int age;											//3rd choice

	dog(int a){											//2nd choice
		age = a;
	}

	dog(const initializer_list<int>& vec) {				//1st choice
		age = *(vec.begin());
	}
};


3. auto type

std::vector<int> vec = {2, 3, 4, 5};

// C++ 03
for(std::vector<int>::iterator it=vec.begin(); it!=vec.end(); ++it)
	m_vec.push_back(*it);

// C++ 11: use auto type
for(auto it=vec.begin(); it!=vec.end(); ++it)
	m_vec.push_back(*it);

auto a = 6;  // a is a integer
auto b = 9.6;  // b is a double
auto c = a;  // c is an integer

//IDE becomes more importatnt


4. foreach

// C++ 03:
for (vector<int>::iterator itr=v.begin(); itr!=v.end(); ++itr)
	cout << (*itr);

// C++ 11
for (int i: v){  // works on any class that has begin() and end()
	cout << i;  // readonly access
}


for (auto& i: v){
	i++;       // changes the values in v
}







 







