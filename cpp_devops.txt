1. 
代码静态分析工具——splint
cpplint是Google提供的工具，用于检查我们的代码是否符合Google C++ Style Guide
cppcheck是一个历史比较悠久的静态检查工具，它的侧重点在于检查代码的逻辑而不是代码的风格。它可以和cpplint一起使用，相互补充。



http://blog.guorongfei.com/2018/11/24/static-analizer/
https://blog.csdn.net/Csdn_Darry/article/details/72793422

2. C++ opensource project
https://www.zhihu.com/question/21376384

3. Jenkins + cppcheck + cpplint
https://blog.csdn.net/LOUISLIAOXH/article/details/54598480
https://blog.csdn.net/jiang1986829/article/details/51328830

jenkins auto
https://blog.csdn.net/qq_37372007/article/details/81586751

4. CMakeList

The make utility and Makefiles provide a build system that can be used to manage the compilation and re-compilation of programs.

CMake is a cross-platform Makefile generator! Simply put, CMake automatically generates the Makefiles for your project.

reference: http://derekmolloy.ie/hello-world-introductions-to-cmake/

(1) The Hello World Example

CMakeLists.txt:

cmake_minimum_required(VERSION 2.8.9)
project (hello)
add_executable(hello helloworld.cpp) 

(2) A Project with Directories
.
 |-- CMakeLists.txt
 |-- build
 |-- include
 |   \-- Student.h
 \-- src
     |-- Student.cpp
     \-- mainapp.cpp

CMakeLists.txt:

cmake_minimum_required(VERSION 2.8.9)
project(directory_test)

#Bring the headers, such as Student.h into the project
include_directories(include)

#Can manually add the sources using the set command as follows:
#set(SOURCES src/mainapp.cpp src/Student.cpp)

#However, the file(GLOB...) allows for wildcard additions:
file(GLOB SOURCES "src/*.cpp")

add_executable(testStudent ${SOURCES})


(3) Building a Shared Library (.so)

 studentlib_shared/
 |-- CMakeLists.txt
 |-- build
 |-- include
 |   \-- Student.h
 \-- src
 .   \-- Student.cpp

CMakeLists.txt:

cmake_minimum_required(VERSION 2.8.9)
project(directory_test)
set(CMAKE_BUILD_TYPE Release)

#Bring the headers, such as Student.h into the project
include_directories(include)

#However, the file(GLOB...) allows for wildcard additions:
file(GLOB SOURCES "src/*.cpp")

#Generate the shared library from the sources
add_library(testStudent SHARED ${SOURCES}) ########## add libray ############

#Set the location for library installation -- i.e., /usr/lib in this case
# not really necessary in this example. Use "sudo make install" to apply
install(TARGETS testStudent DESTINATION /usr/lib) ########## install libray ############

(4) Building a Static Library (.a)

CMakeLists.txt:

cmake_minimum_required(VERSION 2.8.9)
project(directory_test)
set(CMAKE_BUILD_TYPE Release)

#Bring the headers, such as Student.h into the project
include_directories(include)

#However, the file(GLOB...) allows for wildcard additions:
file(GLOB SOURCES "src/*.cpp")

#Generate the static library from the sources
add_library(testStudent STATIC ${SOURCES}) ########## add libray ############

#Set the location for library installation -- i.e., /usr/lib in this case
# not really necessary in this example. Use "sudo make install" to apply
install(TARGETS testStudent DESTINATION /usr/lib) ########## install libray ############

(5) Using a Shared or Static Library

cmake_minimum_required(VERSION 2.8.9)
project (TestLibrary)

#For the shared library:
set ( PROJECT_LINK_LIBS libtestStudent.so )
link_directories( ~/exploringBB/extras/cmake/studentlib_shared/build )

#For the static library:
#set ( PROJECT_LINK_LIBS libtestStudent.a )
#link_directories( ~/exploringBB/extras/cmake/studentlib_static/build )

include_directories(~/exploringBB/extras/cmake/studentlib_shared/include)

add_executable(libtest libtest.cpp)
target_link_libraries(libtest ${PROJECT_LINK_LIBS} )


